// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT COUNT(*) > 0
FROM users
WHERE email = $1
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExists, email)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT COUNT(*) > 0
FROM users
WHERE username = $1
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameExists, username)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(), $1, NOW(), NOW(), $2, $3
)
RETURNING id, username, created_at, updated_at, email, hashed_password, art_style, profile_picture
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.ArtStyle,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, created_at, updated_at, hashed_password, art_style, profile_picture
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID             uuid.UUID
	Email          string
	Username       string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	HashedPassword string
	ArtStyle       sql.NullString
	ProfilePicture sql.NullString
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.ArtStyle,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, created_at, updated_at, hashed_password, art_style, profile_picture
FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID             uuid.UUID
	Email          string
	Username       string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	HashedPassword string
	ArtStyle       sql.NullString
	ProfilePicture sql.NullString
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.ArtStyle,
		&i.ProfilePicture,
	)
	return i, err
}

const updateUserArtStyle = `-- name: UpdateUserArtStyle :exec
UPDATE users SET art_style = $2, updated_at = NOW() WHERE id = $1
`

type UpdateUserArtStyleParams struct {
	ID       uuid.UUID
	ArtStyle sql.NullString
}

func (q *Queries) UpdateUserArtStyle(ctx context.Context, arg UpdateUserArtStyleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserArtStyle, arg.ID, arg.ArtStyle)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users SET email = $2, updated_at = NOW() WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    uuid.UUID
	Email string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}

const updateUserLogoutTimestamp = `-- name: UpdateUserLogoutTimestamp :exec
UPDATE users
SET updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLogoutTimestamp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateUserLogoutTimestamp, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET hashed_password = $2, updated_at = now()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID             uuid.UUID
	HashedPassword string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.HashedPassword)
	return err
}

const updateUserProfilePicture = `-- name: UpdateUserProfilePicture :exec
UPDATE users SET profile_picture = $2, updated_at = NOW() WHERE id = $1
`

type UpdateUserProfilePictureParams struct {
	ID             uuid.UUID
	ProfilePicture sql.NullString
}

func (q *Queries) UpdateUserProfilePicture(ctx context.Context, arg UpdateUserProfilePictureParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfilePicture, arg.ID, arg.ProfilePicture)
	return err
}

const updateUserUsername = `-- name: UpdateUserUsername :exec
UPDATE users SET username = $2, updated_at = NOW() WHERE id = $1
`

type UpdateUserUsernameParams struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserUsername, arg.ID, arg.Username)
	return err
}
