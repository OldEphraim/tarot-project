// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: favorites.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addFavorite = `-- name: AddFavorite :exec
INSERT INTO favorites (user_id, image_url, card_name, art_style) VALUES ($1, $2, $3, $4)
`

type AddFavoriteParams struct {
	UserID   uuid.UUID
	ImageUrl string
	CardName string
	ArtStyle string
}

func (q *Queries) AddFavorite(ctx context.Context, arg AddFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, addFavorite,
		arg.UserID,
		arg.ImageUrl,
		arg.CardName,
		arg.ArtStyle,
	)
	return err
}

const getFavoritesByUser = `-- name: GetFavoritesByUser :many
SELECT 
    image_url, 
    card_name, 
    art_style
FROM 
    favorites
WHERE 
    user_id = $1
`

type GetFavoritesByUserRow struct {
	ImageUrl string
	CardName string
	ArtStyle string
}

func (q *Queries) GetFavoritesByUser(ctx context.Context, userID uuid.UUID) ([]GetFavoritesByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFavoritesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFavoritesByUserRow
	for rows.Next() {
		var i GetFavoritesByUserRow
		if err := rows.Scan(&i.ImageUrl, &i.CardName, &i.ArtStyle); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
